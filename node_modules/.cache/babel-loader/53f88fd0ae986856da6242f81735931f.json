{"ast":null,"code":"var _jsxFileName = \"C:\\\\code editor\\\\CodeOne-main\\\\frontend\\\\src\\\\Components\\\\IDE\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport axios from 'axios';\nimport Playground from './components/Playground';\nimport NavbarComp from './components/Navbar';\nimport { languages } from './components/Languages';\nimport useLocalStorage from '../../hooks/useLocalStorage';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function App({\n  socket\n}) {\n  _s();\n\n  function comp(a, b) {\n    if (a.name > b.name) return 1;\n    if (a.name < b.name) return -1;\n    return 0;\n  }\n\n  languages.sort(comp);\n  const [fontSize, setFontSize] = useLocalStorage('font-size', '18');\n  const [fontSizeName, setFontSizeName] = useLocalStorage('font-size-name', 'Small');\n  const [currentLang, setCurrentLang] = useLocalStorage('lang', languages[0]);\n  const [value, setValue] = useLocalStorage('code', currentLang.sampleCode);\n  const [inputData, setInputData] = useLocalStorage('input', '');\n  const [outputData, setOutputData] = useLocalStorage('output', '');\n  const [running, setRunning] = useState(false);\n\n  function handleChange(v) {\n    setValue(v);\n  }\n\n  function handleInput(inp) {\n    setInputData(inp);\n  }\n\n  function changeFontSize(newFontSize, newFontSizeName) {\n    setFontSize(newFontSize);\n    setFontSizeName(newFontSizeName);\n  }\n\n  function handleClick(newLang, index) {\n    setCurrentLang(newLang); // setValue(newLang.sampleCode)\n  }\n\n  const getOutput = async () => {\n    setOutputData('');\n    setRunning(true);\n    console.log(value);\n    console.log(inputData);\n    var data = JSON.stringify({\n      code: value,\n      language: currentLang.extension,\n      input: inputData\n    });\n    var config = {\n      method: 'post',\n      url: 'https://cors-anywhere-jaagrav.herokuapp.com/https://codexweb.netlify.app/.netlify/functions/enforceCode',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      data: data\n    };\n    axios(config).then(function (response) {\n      setRunning(false);\n      setOutputData(response.data.output);\n      console.log(response.data.output);\n    }).catch(function (error) {\n      setRunning(false);\n      console.log(error);\n      setOutputData(error);\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(NavbarComp, {\n      changeFontSize: changeFontSize,\n      changeLang: handleClick,\n      currentLang: currentLang,\n      execute: getOutput,\n      loading: running,\n      fontSize: fontSize,\n      fontSizeName: fontSizeName\n    }, currentLang.code, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Playground, {\n      currentLang: currentLang,\n      handleCode: handleChange,\n      handleInput: handleInput,\n      output: outputData,\n      fontSize: fontSize,\n      code: value,\n      input: inputData,\n      sockets: socket\n    }, currentLang.name, false, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 83,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"f+nSvVNwbjUi2j1K4X1tIRjk+ho=\", false, function () {\n  return [useLocalStorage, useLocalStorage, useLocalStorage, useLocalStorage, useLocalStorage, useLocalStorage];\n});\n\n_c = App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["C:/code editor/CodeOne-main/frontend/src/Components/IDE/App.js"],"names":["React","useEffect","useState","axios","Playground","NavbarComp","languages","useLocalStorage","App","socket","comp","a","b","name","sort","fontSize","setFontSize","fontSizeName","setFontSizeName","currentLang","setCurrentLang","value","setValue","sampleCode","inputData","setInputData","outputData","setOutputData","running","setRunning","handleChange","v","handleInput","inp","changeFontSize","newFontSize","newFontSizeName","handleClick","newLang","index","getOutput","console","log","data","JSON","stringify","code","language","extension","input","config","method","url","headers","then","response","output","catch","error"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react'\nimport './App.css'\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport axios from 'axios'\n\nimport Playground from './components/Playground'\nimport NavbarComp from './components/Navbar'\nimport { languages } from './components/Languages'\nimport useLocalStorage from '../../hooks/useLocalStorage'\n\nexport function App({ socket }) {\n  function comp(a, b) {\n    if (a.name > b.name) return 1\n    if (a.name < b.name) return -1\n    return 0\n  }\n  languages.sort(comp)\n  const [fontSize, setFontSize] = useLocalStorage('font-size', '18')\n  const [fontSizeName, setFontSizeName] = useLocalStorage(\n    'font-size-name',\n    'Small'\n  )\n\n  const [currentLang, setCurrentLang] = useLocalStorage('lang', languages[0])\n  const [value, setValue] = useLocalStorage('code', currentLang.sampleCode)\n  const [inputData, setInputData] = useLocalStorage('input', '')\n  const [outputData, setOutputData] = useLocalStorage('output', '')\n  const [running, setRunning] = useState(false)\n\n  function handleChange(v) {\n    setValue(v)\n  }\n\n  function handleInput(inp) {\n    setInputData(inp)\n  }\n\n  function changeFontSize(newFontSize, newFontSizeName) {\n    setFontSize(newFontSize)\n    setFontSizeName(newFontSizeName)\n  }\n\n  function handleClick(newLang, index) {\n    setCurrentLang(newLang)\n    // setValue(newLang.sampleCode)\n  }\n\n  const getOutput = async () => {\n    setOutputData('')\n    setRunning(true)\n    console.log(value)\n    console.log(inputData)\n\n    var data = JSON.stringify({\n      code: value,\n      language: currentLang.extension,\n      input: inputData,\n    })\n\n    var config = {\n      method: 'post',\n      url: 'https://cors-anywhere-jaagrav.herokuapp.com/https://codexweb.netlify.app/.netlify/functions/enforceCode',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      data: data,\n    }\n\n    axios(config)\n      .then(function (response) {\n        setRunning(false)\n        setOutputData(response.data.output)\n        console.log(response.data.output)\n      })\n      .catch(function (error) {\n        setRunning(false)\n        console.log(error)\n        setOutputData(error)\n      })\n  }\n\n  return (\n    <div>\n      <NavbarComp\n        changeFontSize={changeFontSize}\n        changeLang={handleClick}\n        currentLang={currentLang}\n        key={currentLang.code}\n        execute={getOutput}\n        loading={running}\n        fontSize={fontSize}\n        fontSizeName={fontSizeName}\n      />\n      <Playground\n        currentLang={currentLang}\n        key={currentLang.name}\n        handleCode={handleChange}\n        handleInput={handleInput}\n        output={outputData}\n        fontSize={fontSize}\n        code={value}\n        input={inputData}\n        sockets={socket}\n      />\n    </div>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}