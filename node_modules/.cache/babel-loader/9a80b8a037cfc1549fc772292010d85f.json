{"ast":null,"code":"var _jsxFileName = \"C:\\\\code editor\\\\CodeOne-main\\\\frontend\\\\src\\\\App.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react'; // import { App as Ide } from './Components/IDE/App'\n// import { App as WebEditor } from './Components/Web Editor/App'\n\nimport { io } from 'socket.io-client';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const ToggleContext = /*#__PURE__*/React.createContext();\nexport default function App() {\n  _s();\n\n  // const [Editor, toggle] = useLocalStorage('editor', true)\n  // const [Editor, toggle] = useState('editor', true)\n  // const [socketIO, setSocket] = useState()\n  useEffect(() => {\n    const connector = io('http://localhost:4545'); // setSocket(connector)\n\n    return () => {\n      connector.disconnect();\n    };\n  }, []); // useEffect(() => {\n  //   if (socketIO == null) return\n  //   socketIO.on('currentEditor', (newEditor) => {\n  //     toggle(newEditor)\n  //   })\n  // }, [socketIO, Editor])\n  // useEffect(() => {\n  //   if (socketIO == null) return\n  //   socketIO.emit('toggleEditor', Editor)\n  // }, [socketIO, Editor])\n  // function handleClick() {\n  //   toggle(!Editor)\n  // }\n  // if (Editor === true) {\n  //   return (\n  //     <div>\n  //       <ToggleContext.Provider value={handleClick}>\n  //         <Ide socket={socketIO} />\n  //       </ToggleContext.Provider>\n  //     </div>\n  //   )\n  // } else \n  // {\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(ToggleContext.Provider, {\n      value: handleClick,\n      children: /*#__PURE__*/_jsxDEV(WebEditor, {\n        socket: socketIO\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 7\n  }, this); // }\n}\n\n_s(App, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n\n_c = App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["C:/code editor/CodeOne-main/frontend/src/App.jsx"],"names":["React","useEffect","useState","io","ToggleContext","createContext","App","connector","disconnect","handleClick","socketIO"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C,C,CACA;AACA;;AACA,SAASC,EAAT,QAAmB,kBAAnB;;AAEA,OAAO,MAAMC,aAAa,gBAAGJ,KAAK,CAACK,aAAN,EAAtB;AAEP,eAAe,SAASC,GAAT,GAAe;AAAA;;AAC5B;AACA;AAEA;AAEAL,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMM,SAAS,GAAGJ,EAAE,CAAC,uBAAD,CAApB,CADc,CAEd;;AAEA,WAAO,MAAM;AACXI,MAAAA,SAAS,CAACC,UAAV;AACD,KAFD;AAGD,GAPQ,EAON,EAPM,CAAT,CAN4B,CAe5B;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACE,sBACE;AAAA,2BACE,QAAC,aAAD,CAAe,QAAf;AAAwB,MAAA,KAAK,EAAEC,WAA/B;AAAA,6BACE,QAAC,SAAD;AAAW,QAAA,MAAM,EAAEC;AAAnB;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF,CAzC0B,CAgD5B;AACD;;GAjDuBJ,G;;KAAAA,G","sourcesContent":["import React, { useEffect, useState } from 'react'\n// import { App as Ide } from './Components/IDE/App'\n// import { App as WebEditor } from './Components/Web Editor/App'\nimport { io } from 'socket.io-client'\n\nexport const ToggleContext = React.createContext()\n\nexport default function App() {\n  // const [Editor, toggle] = useLocalStorage('editor', true)\n  // const [Editor, toggle] = useState('editor', true)\n\n  // const [socketIO, setSocket] = useState()\n\n  useEffect(() => {\n    const connector = io('http://localhost:4545')\n    // setSocket(connector)\n\n    return () => {\n      connector.disconnect()\n    }\n  }, [])\n\n  // useEffect(() => {\n  //   if (socketIO == null) return\n  //   socketIO.on('currentEditor', (newEditor) => {\n  //     toggle(newEditor)\n  //   })\n  // }, [socketIO, Editor])\n\n  // useEffect(() => {\n  //   if (socketIO == null) return\n  //   socketIO.emit('toggleEditor', Editor)\n  // }, [socketIO, Editor])\n\n  // function handleClick() {\n  //   toggle(!Editor)\n  // }\n\n  // if (Editor === true) {\n  //   return (\n  //     <div>\n  //       <ToggleContext.Provider value={handleClick}>\n  //         <Ide socket={socketIO} />\n  //       </ToggleContext.Provider>\n  //     </div>\n  //   )\n  // } else \n  // {\n    return (\n      <div>\n        <ToggleContext.Provider value={handleClick}>\n          <WebEditor socket={socketIO} />\n        </ToggleContext.Provider>\n      </div>\n    )\n  // }\n}\n"]},"metadata":{},"sourceType":"module"}